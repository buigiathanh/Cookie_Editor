/*global chrome*/
import {googleAnalytics} from "./google_analytics";
import {extension} from "./chrome";
import {settingStore} from "../mobx/setting.store";

export const copyCookie = (cookies, format = null) => {
    let type = format;
    if (format === null) {
        const dataFormatCopyCookie = localStorage.getItem("format_copy");
        type = typeof dataFormatCopyCookie === "string" ? dataFormatCopyCookie : "header_string"
    }

    let dataCookie = "";
    switch (type) {
        case "header_string":
            for (let i = 0; i < cookies.length; i++) {
                dataCookie = dataCookie + `${i > 0 ? ";" : ""}${cookies[i].name}=${cookies[i].value}`
            }

            break;

        case "netscape":
            dataCookie = `# Netscape HTTP Cookie File\n# This file was generated by Cookie Editor https://chromewebstore.google.com/detail/cookie-editor/ookdjilphngeeeghgngjabigmpepanpl`;
            for (let i = 0; i < cookies.length; i++) {
                dataCookie = dataCookie + `\n${cookies[i].httpOnly ? "#HttpOnly_" : ""}${cookies[i].domain}\t${String(cookies[i].domain.startsWith(".")).toUpperCase()}\t${cookies[i].path}\t${String(cookies[i].secure).toUpperCase()}\t${cookies[i].expirationDate ? Number(String(cookies[i].expirationDate).split(".")[0]) : Math.round(new Date().getTime() / 1000) + 86400}\t${cookies[i].name}\t${cookies[i].value}`
            }

            break;

        default:
            dataCookie = JSON.stringify(cookies, null, 2);
            break;
    }

    navigator.clipboard.writeText(dataCookie)
        .then(() => {
            googleAnalytics({name: "copy_all_cookie", params: []})
            settingStore.alert = {type: "info", message: extension.getLang("alert_copy_cookie_success")}
        })
        .catch(err => {
            console.error('Failed to copy: ', err);
        });
}

export const clearCookie = async (cookies) => {
    const [tabCurrent] = await chrome.tabs.query({active: true, lastFocusedWindow: true});
    for (let i = 0; i < cookies.length; i++) {
        await chrome.cookies.remove({
            url: tabCurrent.url,
            name: cookies[i].name,
            storeId: cookies[i].storeId
        })
    }

    googleAnalytics({name: "clear_cookie", params: []})
    document.dispatchEvent(new CustomEvent("update_cookie", {
        detail: {action: "clear"},
        bubbles: true,
    }));
}

export const deleteCookie = async (cookie) => {
    const [tabCurrent] = await chrome.tabs.query({active: true, lastFocusedWindow: true});
    await chrome.cookies.remove({
        url: tabCurrent.url,
        name: cookie.name,
        storeId: cookie.storeId
    });

    document.dispatchEvent(new CustomEvent("update_cookie", {
        detail: {action: "delete"},
        bubbles: true,
    }));
    settingStore.alert = {type: "info", message: extension.getLang("alert_delete_cookie_success")}
    googleAnalytics({name: "delete_cookie", params: []})
}