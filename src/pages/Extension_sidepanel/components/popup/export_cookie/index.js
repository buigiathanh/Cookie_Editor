/*global chrome*/
import {useEffect, useRef, useState} from "react";
import { motion } from "framer-motion";
import ModalPopup from "../modal_popup";
import CookieExample from "../../cookie_example";
import {cookieFormats} from "../../../../../constants";
import {googleAnalytics} from "../../../../../utils/google_analytics";
import {extension} from "../../../../../utils/chrome";
import {useClickOutside} from "../../../../../hooks/useClickOutside";
import {settingStore} from "../../../../../mobx/setting.store";
import {observer} from "mobx-react-lite";

const ExportCookie = () => {
    const ref = useRef(null);
    const format = settingStore.format_export;
    useClickOutside(ref, () => {
        settingStore.popup = "";
    })

    const [password, setPassword] = useState("");

    const handleActionExport = async () => {
        let blob;
        const downloadLink = document.createElement('a');
        let dataExport = "";
        let typeFile;
        const [tab] = await chrome.tabs.query({active: true, lastFocusedWindow: true});
        const cookies = await chrome.cookies.getAll({url: tab.url});
        if (format === "netscape") {
            dataExport = `# Netscape HTTP Cookie File\n# This file was generated by Cookie Editor https://chromewebstore.google.com/detail/cookie-editor/ookdjilphngeeeghgngjabigmpepanpl`;
            for (let i = 0; i < cookies.length; i++) {
                dataExport = dataExport + `\n${cookies[i].httpOnly ? "#HttpOnly_" : ""}${cookies[i].domain}\t${String(cookies[i].domain.startsWith(".")).toUpperCase()}\t${cookies[i].path}\t${String(cookies[i].secure).toUpperCase()}\t${cookies[i].expirationDate ? Number(String(cookies[i].expirationDate).split(".")[0]) : Math.round(new Date().getTime() / 1000) + 86400}\t${cookies[i].name}\t${cookies[i].value}`
            }
            typeFile = "txt";
        } else if (format === "header_string") {
            for (let i = 0; i < cookies.length; i++) {
                dataExport = dataExport + `${i > 0 ? ";" : ""}${cookies[i].name}=${cookies[i].value}`
            }

            typeFile = "txt";
        } else {
            dataExport = JSON.stringify(cookies, null, 2);
            typeFile = "json";
        }
        if (password.length === 0) {
            blob = new Blob([dataExport], {type: typeFile === "json" ? 'application/json' : "application/txt"});
            downloadLink.download = `${tab.url.split("/")[2]}_${format}_${new Date().getTime()}.${typeFile}`;
        } else {
            const CryptoJS = require("crypto-js");
            const cipherText = CryptoJS.AES.encrypt(JSON.stringify(dataExport), password).toString();
            blob = new Blob([cipherText], {type: 'application/txt'});
            downloadLink.download = `E2EE_${tab.url.split("/")[2]}_${format}_${new Date().getTime()}.txt`;
        }


        downloadLink.href = URL.createObjectURL(blob);
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        googleAnalytics({name: "export_cookie", params: []})
        settingStore.popup = "";
    }

    return (
        <>
            {
                settingStore.popup === "export_cookie" && (
                    <>
                        <ModalPopup />

                        <motion.div
                            ref={ref}
                            initial={{opacity: 0, y: -50}}
                            animate={{opacity: 1, y: 0}}
                            exit={{opacity: 0, y: -50}}
                            transition={{duration: 0.5}}
                            className={`fixed top-0 left-0 p-[10px]`}
                            style={{zIndex: 50, width: "calc(100% - 50px)"}}
                        >
                            <div className={`bg-white rounded-[10px] p-5`}>
                                <p className={`font-bold text-[14px] mb-2`}>
                                    {extension.getLang("title_export_cookie")}
                                </p>
                                <p className={`text-[12px] mb-5`}>
                                    {extension.getLang("description_export_cookie")}
                                </p>
                                <div className={`w-full flex flex-wrap justify-between mb-2`}>
                                    {
                                        cookieFormats.map((item, key) => (
                                            <div key={key} className="inline-flex w-fit pr-3 items-center mb-4">
                                                <input
                                                    id={`cookie_format_${key}`}
                                                    type="radio"
                                                    value={item.value}
                                                    name="format"
                                                    onClick={(e) => settingStore.setFormatExport(e.target.value)}
                                                    checked={format === item.value}
                                                    className="w-4 h-4 text-blue-600 bg-gray-400 border-gray-300 focus:ring-blue-500"
                                                />
                                                <label
                                                    htmlFor={`cookie_format_${key}`}
                                                    className="ms-2 text-[12px] cursor-pointer font-medium text-gray-900"
                                                >
                                                    {item.title}
                                                </label>
                                            </div>
                                        ))
                                    }
                                </div>
                                <p className={`text-[12px] font-medium mb-2`}>{extension.getLang("str_example")}</p>
                                <div className={`w-full mb-4 bg-gray-300 rounded-[10px] p-[10px]`}>
                                    <CookieExample format={format}/>
                                </div>
                                <div className={`w-full mb-5`}>
                                    <label
                                        htmlFor="hostOnly"
                                        className="block mb-2 text-[12px] font-medium text-gray-900">
                                        {extension.getLang("label_password_encrypt")}
                                    </label>
                                    <input
                                        type="password"
                                        placeholder={extension.getLang("label_password_encrypt")}
                                        onChange={(e) => setPassword(e.target.value)}
                                        className="bg-gray-50 border border-gray-300 text-gray-900 text-[12px] rounded-lg block w-full p-2.5 mb-1"
                                        value={password}
                                    />
                                    <p className={`text-gray-500`}>
                                        {extension.getLang("description_password")}
                                    </p>
                                </div>
                                <div className={`w-full flex justify-between`}>
                                    <div className={"inline-block w-[59%]"}>
                                        <button
                                            onClick={handleActionExport}
                                            className={`h-[40px] w-full rounded-[10px] bg-blue-500 text-white px-5`}>
                                            {extension.getLang("btn_export")}
                                        </button>
                                    </div>
                                    <div className={"inline-block w-[39%]"}>
                                        <button
                                            onClick={() => settingStore.popup = ""}
                                            className={`h-[40px] w-full rounded-[10px] bg-gray-200 text-gray-900 px-5`}>
                                            {extension.getLang("btn_cancel")}
                                        </button>
                                    </div>
                                </div>
                                <div className={`w-full mt-4`}>
                                    <p className={`text-gray-800 text-xs`}>
                                        {extension.getLang("str_convert_share_link")} <span
                                        onClick={() => settingStore.popup = "share_cookie"}
                                        className={`text-blue-600 font-bold underline cursor-pointer`}>{extension.getLang("cta_convert_share_link")}</span>
                                    </p>
                                </div>
                            </div>
                        </motion.div>
                    </>
                )
            }
        </>
    )
}

export default observer(ExportCookie)